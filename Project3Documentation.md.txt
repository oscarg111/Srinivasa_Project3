This project builds on the relational algebra operations with indexing introduced in Project 2. In Project 3, we aim to analyze the performance of various indexing techniques by comparing different data structures used as indices. This evaluation will focus on Select and Join operations, using the tuple generator to create large datasets and benchmark runtime performance.

Project 3 examines the performance of the following indexing structures:

NO_MAP: No indexing is used; a full table scan is performed.
TREE_MAP: A binary tree-based map that enables log(n) search time.
HASH_MAP: A hash-based index providing average O(1) search time for specific key lookups.
BPTREE_MAP: A B+ tree structure that allows efficient search, insertion, and deletion, often used in databases.

Relational Algebra Operations with Indexing:
The following operations have been optimized using indexing techniques, making the project more efficient in handling large datasets:

Select (Indexed Select):
Implements an indexed selection operation, allowing for faster retrieval of rows that match a given condition by utilizing an index to quickly locate matching tuples.

Project (Duplicate Elimination):
Enhances the Project operation by efficiently eliminating duplicate tuples using indexing, ensuring that the final output only contains unique rows.

Union (Duplicate Elimination):
Uses indexing to efficiently combine two tables, eliminating duplicates to return all unique rows from both tables without needing a full scan of each table.

Minus (Tuple Existence Check):
Optimizes the Minus operation by checking if each tuple in table r exists in table s using an index, improving the speed of the subtraction process.

Join (Indexed Join):
Implements an indexed join operation, where tables are merged based on common attributes. The use of indices speeds up the matching process, making joins more efficient.

Indexing Implementation:
A BpTreeMap is used to implement the indices, providing an efficient mechanism for searching, inserting, and deleting tuples in the table.
